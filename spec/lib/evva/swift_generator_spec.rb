describe Evva::SwiftGenerator do
  let(:generator) { described_class.new }

  describe "#events" do
    subject { generator.events(event_bundle, nil, nil, nil) }

    let(:event_bundle) { [
      Evva::AnalyticsEvent.new("cp_page_view", {}, ["firebase"]),
      Evva::AnalyticsEvent.new("cp_page_view_a", { course_id: "Long", course_name: "String" }, ["firebase", "Custom Destination"]),
      Evva::AnalyticsEvent.new("cp_page_view_b", { course_id: "Long", course_name: "String", from_screen: "CourseProfileSource" }, []),
      Evva::AnalyticsEvent.new("cp_page_view_c", { course_id: "Long", course_name: "String", from_screen: "CourseProfileSource?" }, []),
      Evva::AnalyticsEvent.new("cp_page_view_d", { course_id: "Long?", course_name: "String" }, []),
    ] }

    let(:expected) {
<<-Swift
// This file was automatically generated by evva: https://github.com/hole19/evva

import Foundation

extension Analytics {
    struct EventData {
        let name: String
        var properties: [String: Any]?
        let destinations: [Destination]

        init(name: String, properties: [String: Any]?, destinations: [Destination]) {
            self.name = name
            self.properties = properties
            self.destinations = destinations
        }

        init(type: EventType, properties: [String: Any]?) {
            self.init(name: type.name, properties: properties, destinations: type.destinations)
        }
    }

    enum EventType: String {
        case cpPageView = "cp_page_view"
        case cpPageViewA = "cp_page_view_a"
        case cpPageViewB = "cp_page_view_b"
        case cpPageViewC = "cp_page_view_c"
        case cpPageViewD = "cp_page_view_d"

        var name: String { return rawValue }

        var destinations: [Destination] {
            switch self {
            case .cpPageView: return [.firebase]
            case .cpPageViewA: return [.firebase, .customDestination]
            case .cpPageViewB: return []
            case .cpPageViewC: return []
            case .cpPageViewD: return []
            }
        }
    }

    enum Event {
        case cpPageView
        case cpPageViewA(course_id: Int, course_name: String)
        case cpPageViewB(course_id: Int, course_name: String, from_screen: CourseProfileSource)
        case cpPageViewC(course_id: Int, course_name: String, from_screen: CourseProfileSource?)
        case cpPageViewD(course_id: Int?, course_name: String)

        var data: EventData {
            switch self {
            case .cpPageView:
                return EventData(type: .cpPageView,
                                 properties: nil)

            case let .cpPageViewA(course_id, course_name):
                return EventData(type: .cpPageViewA,
                                 properties: [
                                    "course_id": course_id as Any,
                                    "course_name": course_name as Any,
                                 ])

            case let .cpPageViewB(course_id, course_name, from_screen):
                return EventData(type: .cpPageViewB,
                                 properties: [
                                    "course_id": course_id as Any,
                                    "course_name": course_name as Any,
                                    "from_screen": from_screen.rawValue as Any,
                                 ])

            case let .cpPageViewC(course_id, course_name, from_screen):
                return EventData(type: .cpPageViewC,
                                 properties: [
                                    "course_id": course_id as Any,
                                    "course_name": course_name as Any,
                                    "from_screen": from_screen?.rawValue as Any,
                                 ])

            case let .cpPageViewD(course_id, course_name):
                return EventData(type: .cpPageViewD,
                                 properties: [
                                    "course_id": course_id as Any,
                                    "course_name": course_name as Any,
                                 ])
            }
        }
    }
}
Swift
    }

    it { should eq expected }
  end

  describe "#special_property_enums" do
    subject { generator.special_property_enums(enums) }

    let(:enums) { [
      Evva::AnalyticsEnum.new("CourseProfileSource", ["course_discovery", "synced_courses"]),
      Evva::AnalyticsEnum.new("PremiumFrom", ["Course Profile", "Round Setup"]),
    ] }

    let(:expected) {
<<-Swift
// This file was automatically generated by evva: https://github.com/hole19/evva

import Foundation

extension Analytics {
    enum CourseProfileSource: String {
        case courseDiscovery = "course_discovery"
        case syncedCourses = "synced_courses"
    }

    enum PremiumFrom: String {
        case courseProfile = "Course Profile"
        case roundSetup = "Round Setup"
    }
}
Swift
    }

    it { should eq expected }
  end

  describe "#people_properties" do
    subject { generator.people_properties(people_bundle, "", "", "") }

    let(:people_bundle) { [
      Evva::AnalyticsProperty.new("rounds_with_wear", "String", ["firebase"]),
      Evva::AnalyticsProperty.new("wear_platform", "WearableAppPlatform", ["firebase", "custom destination"]),
      Evva::AnalyticsProperty.new("number_of_times_it_happened", "Long", []),
    ] }

    let(:expected) {
<<-Swift
// This file was automatically generated by evva: https://github.com/hole19/evva

import Foundation

extension Analytics {
    struct PropertyData {
        let name: String
        let value: Any
        let destinations: [Destination]

        init(name: String, value: Any, destinations: [Destination]) {
            self.name = name
            self.value = value
            self.destinations = destinations
        }

        init(type: PropertyType, value: Any) {
            self.init(name: type.name, value: value, destinations: type.destinations)
        }
    }

    enum PropertyType: String {
        case roundsWithWear = "rounds_with_wear"
        case wearPlatform = "wear_platform"
        case numberOfTimesItHappened = "number_of_times_it_happened"

        var name: String { return rawValue }

        var destinations: [Destination] {
            switch self {
            case .roundsWithWear: return [.firebase]
            case .wearPlatform: return [.firebase, .customDestination]
            case .numberOfTimesItHappened: return []
            }
        }
    }

    enum Property {
        case roundsWithWear(String)
        case wearPlatform(WearableAppPlatform)
        case numberOfTimesItHappened(Int)

        var data: PropertyData {
            switch self {
            case let .roundsWithWear(value):
                return PropertyData(type: .roundsWithWear,
                                    value: value)

            case let .wearPlatform(value):
                return PropertyData(type: .wearPlatform,
                                    value: value.rawValue)

            case let .numberOfTimesItHappened(value):
                return PropertyData(type: .numberOfTimesItHappened,
                                    value: value)
            }
        }
    }
}
Swift
    }

    it { should eq expected }
  end

  describe "#destinations" do
    subject { generator.destinations(destinations, "") }

    let(:destinations) { [
      "firebase",
      "whatever you want really"
    ] }

    let(:expected) {
<<-Swift
// This file was automatically generated by evva: https://github.com/hole19/evva

import Foundation

extension Analytics {
    enum Destination {
        case firebase
        case whateverYouWantReally
    }
}
Swift
    }

    it { should eq expected }
  end
end
